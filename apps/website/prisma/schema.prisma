generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          String   @id @default(cuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sessions    Session[]
  scoreLedger ScoreBlock[]
  joinRequest JoinRequest?
}

model ScoreBlock {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  session   Session  @relation(fields: [sessionId], references: [id])
  sessionId Int
  score     Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  // Any extra individual data
  data      String
}

model Session {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  game       Game     @relation(fields: [gameId], references: [id])
  gameId     Int
  user       User[]
  // Any extra data that was sent with the session
  data       String
  // The score blocks associated with this session
  scoreBlock ScoreBlock[]
  // Whether the current session is active.
  active     Boolean
}

model JoinRequest {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    Int
}

model Game {
  id           Int      @id @default(autoincrement())
  name         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  // Sessions; only one can be "active" at a time.
  sessions     Session[]
  joinRequests JoinRequest[]
  // Amount of players this game takes. Leave null for unknown.
  playerCount  Int?
}
